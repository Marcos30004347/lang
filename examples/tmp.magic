
// fn (i32 * i32 * &i32) -> i32

f :: fn (a: i32) -> fn i32 -> i32 {
	return fn (b: i32) -> i32 {
		return a + b;
	}
}

something :: effect i32 -> i32;

w :: fn (a: i32) -> i32 {
	b := 2*a + a;
	
	c := b + something!(a);

	d := c + 3;

	e := d - something!(a);

	return e;
}

main :: () {
	h :: handler {
		something :: effect (x: i32; k: resumption) -> i32 {
			x := resume k 0;
			y := resume k 1;

			return x + y;
		}
	}

	return w(3) with h;
}


// void prompt_h(void (*handler)(int, context_t*), int x, context_t* ctx) {
//	handler(x, ctx);
//	if (ctx->is_yielding)
// int main(context_t* ctx) {
//	prompt_h(w, 3, ctx);
// }